---
interface Props {
  label?: string;
  name?: string;
  id?: string;
  options?: string[] | { value: string; label: string }[];
  defaultText?: string;
  disabled?: boolean;
  required?: boolean;
}

const { 
  label, 
  name = 'selector', 
  id = 'selector', 
  options = [], 
  defaultText = 'Selecciona una opciÃ³n',
  disabled = false,
  required = false
} = Astro.props;

// Normalize options to ensure we can handle both string and object arrays
const normalizedOptions = options.map(option => 
  typeof option === 'string' 
    ? { value: option, label: option }
    : option
);
---

<div class="w-full">
  {label && (
    <label 
      for={id} 
      class="block mb-2 text-sm font-medium text-gray-700 dark:text-neutral-300"
    >
      {label}
    </label>
  )}
  <select 
    id={id}
    name={name}
    class="py-3 px-4 pe-9 block w-full bg-gray-100 border-transparent rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-700 dark:border-transparent dark:text-neutral-400 dark:focus:ring-neutral-600"
    disabled={disabled}
    required={required}
  >
    <option value="" selected>{defaultText}</option>
    {normalizedOptions.map((option) => (
      <option value={option.value}>
        {option.label}
      </option>
    ))}
  </select>
</div>